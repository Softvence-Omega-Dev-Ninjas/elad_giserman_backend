services:
  caddy:
    image: caddy
    container_name: caddy
    restart: always
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      server:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'caddy validate --config /etc/caddy/Caddyfile']
      interval: 30s
      timeout: 5s
      retries: 3

  server:
    platform: linux/amd64
    image: ${DOCKER_USERNAME}/${PACKAGE_NAME}:${PACKAGE_VERSION}
    container_name: ${PACKAGE_NAME}_api
    restart: always
    env_file:
      - .env
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:postgres@db:5432/${PACKAGE_NAME}_db

      REDIS_HOST: redis
      REDIS_PORT: 6379

      BASE_URL: http://0.0.0.0:5050/api
      PORT: 5050
    ports:
      - '5050:5050'
    depends_on:
      db:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    command: >
      sh -c "
        echo 'üèÅ Waiting for DB...';
        sleep 5;
        npx prisma migrate deploy;
        echo 'üöÄ Starting app...';
        pnpm start
      "
    volumes:
      - files-data:/app/uploads
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://0.0.0.0:5050/api/health']
      interval: 30s
      timeout: 10s
      retries: 5

  db:
    image: postgres:17
    container_name: ${PACKAGE_NAME}_db
    restart: always
    user: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ${PACKAGE_NAME}_db
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - '5433:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  redis-master:
    image: redis
    container_name: ${PACKAGE_NAME}_redis-master
    command:
      [
        'redis-server',
        '--appendonly',
        'yes',
        '--bind',
        '0.0.0.0',
        '--protected-mode',
        'no',
      ]
    ports:
      - '22376:6379'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 3s
      retries: 5
    restart: always

  redis-replica:
    image: redis
    container_name: ${PACKAGE_NAME}_redis-replica
    command:
      [
        'redis-server',
        '--replicaof',
        'redis-master',
        '6379',
        '--bind',
        '0.0.0.0',
        '--protected-mode',
        'no',
      ]
    ports:
      - '22377:6379'
    depends_on:
      - redis-master
    restart: always

volumes:
  db_data:
  files-data:
  caddy_data:
  caddy_config:

networks:
  default:
    name: ${PACKAGE_NAME}_network
    labels:
      - 'project=${PACKAGE_NAME}'
